{"version":3,"file":"static/js/562.a16140ba.chunk.js","mappings":"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","sources":["common/utils/smallFn/convertDate.js","pages/regPages/UserProfile.jsx"],"sourcesContent":["import { format } from 'date-fns';\r\nimport { toZonedTime  } from 'date-fns-tz';\r\nimport { uk } from 'date-fns/locale';\r\n\r\nfunction translateUkrainianMonthToEnglish(month) {\r\n    const months = {\r\n        \"січня\": \"January\",\r\n        \"лютого\": \"February\",\r\n        \"березня\": \"March\",\r\n        \"квітня\": \"April\",\r\n        \"травня\": \"May\",\r\n        \"червня\": \"June\",\r\n        \"липня\": \"July\",\r\n        \"серпня\": \"August\",\r\n        \"вересня\": \"September\",\r\n        \"жовтня\": \"October\",\r\n        \"листопада\": \"November\",\r\n        \"грудня\": \"December\"\r\n    };\r\n\r\n    return months[month];\r\n}\r\n\r\nfunction parseUkrainianDate(dateStr) {\r\n    const cleanedDateStr = dateStr.replace('р.', '').replace('о', '').trim();\r\n    \r\n    const [day, monthUkr, year, time, time2, time3] = cleanedDateStr.split(' ');\r\n   \r\n    const monthEng = translateUkrainianMonthToEnglish(monthUkr);\r\n\r\n    const formattedDateStr = `${monthEng} ${day}, ${year} ${time3}.000+00:00`;\r\n\r\n    return new Date(formattedDateStr).toUTCString();\r\n}\r\n\r\n\r\n\r\nconst formatDateToUkrainian = (dateStr) => {\r\n    const date = new Date(dateStr);\r\n    const day = date.getUTCDate();\r\n    const monthNames = ['січня', 'лютого', 'березня', 'квітня', 'травня', 'червня', 'липня', 'серпня', 'вересня', 'жовтня', 'листопада', 'грудня'];\r\n    const month = monthNames[date.getUTCMonth()];\r\n    const year = date.getUTCFullYear();\r\n    const hours = String(date.getUTCHours()).padStart(2, '0');\r\n    const minutes = String(date.getUTCMinutes()).padStart(2, '0');\r\n  \r\n    return `${day} ${month} ${year} р. о ${hours}:${minutes}`;\r\n  };\r\n\r\nexport {parseUkrainianDate, formatDateToUkrainian};","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport DatePicker from 'react-datepicker'; // Import DatePicker component\r\nimport 'react-datepicker/dist/react-datepicker.css'; // Import DatePicker CSS\r\nimport { Link } from 'react-router-dom';\r\nimport { formatDateToUkrainian, parseUkrainianDate } from '../../common/utils/smallFn/convertDate';\r\nimport './userProfile.css';\r\n\r\nconst UserProfile = () => {\r\n    const [user, setUser] = useState(null);\r\n    const [orders, setOrders] = useState([]);\r\n    const [teacherFilter, setTeacherFilter] = useState('');\r\n    const [uniqueTeachers, setUniqueTeachers] = useState([]);\r\n    const [selectedBookingDate, setSelectedBookingDate] = useState(null);\r\n    const [highlightedBookingDates, setHighlightedBookingDates] = useState([]);\r\n\r\n    const schoolId = localStorage.getItem('schoolId')\r\n\r\n    useEffect(() => {\r\n        fetchUserData(setUser, axios, setOrders);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // After loading orders, extract unique teacher names and marked dates\r\n        if (orders.length > 0) {\r\n            const allTeachers = orders.flatMap(order => {\r\n                try {\r\n                    const slots = order.time;\r\n                    return slots.map(slot => slot.teacherName);\r\n                } catch (e) {\r\n                    console.error('Invalid time format:', order.time);\r\n                    return [];\r\n                }\r\n            });\r\n            setUniqueTeachers([...new Set(allTeachers)]);\r\n\r\n            const dates = orders.flatMap(order => order.time.map(slot => new Date(slot.time)));\r\n            setHighlightedBookingDates([...new Set(dates)]);\r\n        }\r\n    }, [orders]);\r\n\r\n    const fetchUserData = async (setUser, axios, setOrders) => {\r\n        const token = localStorage.getItem('token');\r\n        console.log(token)\r\n        if (token) {\r\n            try {\r\n                const response = await axios.get('http://13.60.221.226/api/me', {\r\n                    headers: { 'Authorization': `Bearer ${token}` }\r\n                });\r\n                const { user, orders } = response.data;\r\n                setUser(user);\r\n                setOrders(orders);\r\n            } catch (error) {\r\n                console.error('Error fetching user data:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            const response = await axios.post('http://13.60.221.226/api/logout');\r\n            if (response.status === 200) {\r\n                setUser(null);\r\n                setOrders([]);\r\n                localStorage.removeItem('token');\r\n                console.log('Logged out successfully');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error logging out:', error);\r\n        }\r\n    };\r\n\r\n    // Filter orders by selected date\r\n    const filterByDate = (orders, date) => {\r\n        if (!date) return orders;\r\n        return orders.filter(order => {\r\n            const slots = order.time || [];\r\n            return slots.some(slot => new Date(slot.time).getDate(), new Date(selectedBookingDate).getDate());\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"user-profile\">\r\n            <h2>Особистий кабінет</h2>\r\n            {user ? (\r\n                <>\r\n                    <p>Ім'я користувача: {user.username}</p>\r\n                    <p>Email: {user.email}</p>\r\n                    <p>Телефон: {user.phone}</p>\r\n                    <h3>Ваші записи</h3>\r\n                    {/* \r\n                    <div>\r\n                        <button onClick={() => setTeacherFilter('')}>Показати всіх</button>\r\n                        {uniqueTeachers.map((teacher, idx) => (\r\n                            <button key={idx} onClick={() => setTeacherFilter(teacher)}>\r\n                                {teacher}\r\n                            </button>\r\n                        ))}\r\n                    </div> */}\r\n\r\n                    {/* DatePicker for date filtering */}\r\n                    <DatePicker\r\n                        selected={selectedBookingDate}\r\n                        onChange={(date) => setSelectedBookingDate(date)}\r\n                        dateFormat=\"yyyy-MM-dd\"\r\n                        isClearable\r\n                        placeholderText=\"Виберіть дату для фільтрації записів\"\r\n                        inline\r\n                        highlightDates={highlightedBookingDates}\r\n                    />\r\n\r\n                    {/* Filtered orders by selected date */}\r\n                    {selectedBookingDate && <p>Вибрана дата: {selectedBookingDate.toLocaleDateString()}</p>}\r\n\r\n                    {orders.length > 0 ? (\r\n                        <ul className=\"orders-list\">\r\n\r\n                            {filterByDate(orders, selectedBookingDate)\r\n                                .map((order, index) => {\r\n                                    let formattedSlots = [];\r\n\r\n                                    try {\r\n                                        const slots = order.time;\r\n                                        formattedSlots = slots.map(slot => ({\r\n                                            teacherName: slot.teacherName,\r\n                                            lang: slot.lang,\r\n                                            levelName: slot.levelName,\r\n                                            lessonTypes: slot.lessonTypes,\r\n                                            time: formatDateToUkrainian(slot.time),\r\n                                            payment_status: slot.payment_status\r\n                                        }));\r\n                                    } catch (e) {\r\n                                        console.error('Invalid time format:', order.time);\r\n                                    }\r\n\r\n                                    const filteredSlots = formattedSlots\r\n                                        ? formattedSlots.filter(slot => {\r\n                                            const slotDate = new Date(parseUkrainianDate(slot.time));\r\n                                            return slotDate instanceof Date && !isNaN(slotDate) &&\r\n                                                selectedBookingDate instanceof Date && !isNaN(selectedBookingDate) &&\r\n                                                slotDate.getDate() === selectedBookingDate.getDate();\r\n                                        })\r\n                                        : [];\r\n\r\n                                    // Условие для предотвращения рендера пустого заказа\r\n                                    if (filteredSlots.length === 0) return null;\r\n                                        console.log(filteredSlots)\r\n                                    return (\r\n                                        <li key={index}>\r\n                                            <strong>Мова:</strong> {order.lang} <br />\r\n                                            <strong>Курс:</strong> {order.levelName} <br />\r\n                                            <strong>Часи:</strong>\r\n                                            <ul>\r\n                                                {filteredSlots.map((slot, idx) => (\r\n                                                    <li key={idx} style={{ marginBottom: '10px' }}>\r\n                                                        <strong>Запис на урок:</strong>\r\n                                                        <div><strong>Вчитель:</strong> {slot.teacherName}</div>\r\n                                                        <div><strong>Мова:</strong> {slot.lang}</div>\r\n                                                        <div><strong>Рівень:</strong> {slot.levelName}</div>\r\n                                                        <div><strong>Тип уроку:</strong> {slot.lessonTypes}</div>\r\n                                                        <div><strong>Час:</strong> {slot.time}</div>\r\n                                                        <div><strong>Статус оплати:</strong> {slot.payment_status}</div>\r\n                                                        {order.students.length > 0 && (\r\n                                                            <div style={{ marginTop: '10px' }}>\r\n                                                                <strong>Студенти:</strong>\r\n                                                                <ul>\r\n                                                                    {order.students.map((student, studentIdx) => (\r\n                                                                        <li key={studentIdx}>\r\n                                                                            <div>Ім'я: {student.name}</div>\r\n                                                                            <div>Email: {student.email}</div>\r\n                                                                            <div>Телефон: {student.phone}</div>\r\n                                                                            \r\n                                                                        </li>\r\n                                                                    ))}\r\n                                                                </ul>\r\n                                                            </div>\r\n                                                        )}\r\n                                                    </li>\r\n                                                ))}\r\n                                            </ul>\r\n                                        </li>\r\n                                    );\r\n                                })}\r\n\r\n                        </ul>\r\n                    ) : (\r\n                        <p>Замовлення відсутні.</p>\r\n                    )}\r\n                </>\r\n            ) : (\r\n                <p>Завантаження даних користувача...</p>\r\n            )}\r\n\r\n            <Link to={`/${schoolId}`}>\r\n                <button className=\"btn-logout\" onClick={handleLogout}>Вийти</button>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserProfile;\r\n"],"names":["parseUkrainianDate","dateStr","cleanedDateStr","replace","trim","day","monthUkr","year","time","time2","time3","split","monthEng","Date","toUTCString","formatDateToUkrainian","date","getUTCDate","getUTCMonth","getUTCFullYear","String","getUTCHours","padStart","getUTCMinutes","UserProfile","user","setUser","useState","orders","setOrders","teacherFilter","setTeacherFilter","uniqueTeachers","setUniqueTeachers","selectedBookingDate","setSelectedBookingDate","highlightedBookingDates","setHighlightedBookingDates","schoolId","localStorage","getItem","useEffect","fetchUserData","axios","length","allTeachers","flatMap","order","map","slot","teacherName","e","console","error","Set","dates","async","token","log","response","get","headers","data","_jsxs","className","children","_jsx","_Fragment","username","email","phone","DatePicker","selected","onChange","dateFormat","isClearable","placeholderText","inline","highlightDates","toLocaleDateString","filterByDate","filter","some","getDate","index","formattedSlots","lang","levelName","lessonTypes","payment_status","filteredSlots","slotDate","isNaN","idx","style","marginBottom","students","marginTop","student","studentIdx","name","Link","to","onClick","post","status","removeItem"],"sourceRoot":""}